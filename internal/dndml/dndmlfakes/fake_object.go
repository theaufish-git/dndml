// Code generated by counterfeiter. DO NOT EDIT.
package dndmlfakes

import (
	"sync"

	"github.com/theaufish-git/dndml/internal/dndml"
	"github.com/theaufish-git/dndml/pkg/dndml/enums"
)

type FakeObject struct {
	GetKindStub        func() enums.Object
	getKindMutex       sync.RWMutex
	getKindArgsForCall []struct {
	}
	getKindReturns struct {
		result1 enums.Object
	}
	getKindReturnsOnCall map[int]struct {
		result1 enums.Object
	}
	GetNameStub        func() string
	getNameMutex       sync.RWMutex
	getNameArgsForCall []struct {
	}
	getNameReturns struct {
		result1 string
	}
	getNameReturnsOnCall map[int]struct {
		result1 string
	}
	GetSourceStub        func() string
	getSourceMutex       sync.RWMutex
	getSourceArgsForCall []struct {
	}
	getSourceReturns struct {
		result1 string
	}
	getSourceReturnsOnCall map[int]struct {
		result1 string
	}
	GetVersionStub        func() string
	getVersionMutex       sync.RWMutex
	getVersionArgsForCall []struct {
	}
	getVersionReturns struct {
		result1 string
	}
	getVersionReturnsOnCall map[int]struct {
		result1 string
	}
	RenderStub        func(map[string]interface{}) ([]byte, error)
	renderMutex       sync.RWMutex
	renderArgsForCall []struct {
		arg1 map[string]interface{}
	}
	renderReturns struct {
		result1 []byte
		result2 error
	}
	renderReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeObject) GetKind() enums.Object {
	fake.getKindMutex.Lock()
	ret, specificReturn := fake.getKindReturnsOnCall[len(fake.getKindArgsForCall)]
	fake.getKindArgsForCall = append(fake.getKindArgsForCall, struct {
	}{})
	stub := fake.GetKindStub
	fakeReturns := fake.getKindReturns
	fake.recordInvocation("GetKind", []interface{}{})
	fake.getKindMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeObject) GetKindCallCount() int {
	fake.getKindMutex.RLock()
	defer fake.getKindMutex.RUnlock()
	return len(fake.getKindArgsForCall)
}

func (fake *FakeObject) GetKindCalls(stub func() enums.Object) {
	fake.getKindMutex.Lock()
	defer fake.getKindMutex.Unlock()
	fake.GetKindStub = stub
}

func (fake *FakeObject) GetKindReturns(result1 enums.Object) {
	fake.getKindMutex.Lock()
	defer fake.getKindMutex.Unlock()
	fake.GetKindStub = nil
	fake.getKindReturns = struct {
		result1 enums.Object
	}{result1}
}

func (fake *FakeObject) GetKindReturnsOnCall(i int, result1 enums.Object) {
	fake.getKindMutex.Lock()
	defer fake.getKindMutex.Unlock()
	fake.GetKindStub = nil
	if fake.getKindReturnsOnCall == nil {
		fake.getKindReturnsOnCall = make(map[int]struct {
			result1 enums.Object
		})
	}
	fake.getKindReturnsOnCall[i] = struct {
		result1 enums.Object
	}{result1}
}

func (fake *FakeObject) GetName() string {
	fake.getNameMutex.Lock()
	ret, specificReturn := fake.getNameReturnsOnCall[len(fake.getNameArgsForCall)]
	fake.getNameArgsForCall = append(fake.getNameArgsForCall, struct {
	}{})
	stub := fake.GetNameStub
	fakeReturns := fake.getNameReturns
	fake.recordInvocation("GetName", []interface{}{})
	fake.getNameMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeObject) GetNameCallCount() int {
	fake.getNameMutex.RLock()
	defer fake.getNameMutex.RUnlock()
	return len(fake.getNameArgsForCall)
}

func (fake *FakeObject) GetNameCalls(stub func() string) {
	fake.getNameMutex.Lock()
	defer fake.getNameMutex.Unlock()
	fake.GetNameStub = stub
}

func (fake *FakeObject) GetNameReturns(result1 string) {
	fake.getNameMutex.Lock()
	defer fake.getNameMutex.Unlock()
	fake.GetNameStub = nil
	fake.getNameReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeObject) GetNameReturnsOnCall(i int, result1 string) {
	fake.getNameMutex.Lock()
	defer fake.getNameMutex.Unlock()
	fake.GetNameStub = nil
	if fake.getNameReturnsOnCall == nil {
		fake.getNameReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.getNameReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeObject) GetSource() string {
	fake.getSourceMutex.Lock()
	ret, specificReturn := fake.getSourceReturnsOnCall[len(fake.getSourceArgsForCall)]
	fake.getSourceArgsForCall = append(fake.getSourceArgsForCall, struct {
	}{})
	stub := fake.GetSourceStub
	fakeReturns := fake.getSourceReturns
	fake.recordInvocation("GetSource", []interface{}{})
	fake.getSourceMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeObject) GetSourceCallCount() int {
	fake.getSourceMutex.RLock()
	defer fake.getSourceMutex.RUnlock()
	return len(fake.getSourceArgsForCall)
}

func (fake *FakeObject) GetSourceCalls(stub func() string) {
	fake.getSourceMutex.Lock()
	defer fake.getSourceMutex.Unlock()
	fake.GetSourceStub = stub
}

func (fake *FakeObject) GetSourceReturns(result1 string) {
	fake.getSourceMutex.Lock()
	defer fake.getSourceMutex.Unlock()
	fake.GetSourceStub = nil
	fake.getSourceReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeObject) GetSourceReturnsOnCall(i int, result1 string) {
	fake.getSourceMutex.Lock()
	defer fake.getSourceMutex.Unlock()
	fake.GetSourceStub = nil
	if fake.getSourceReturnsOnCall == nil {
		fake.getSourceReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.getSourceReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeObject) GetVersion() string {
	fake.getVersionMutex.Lock()
	ret, specificReturn := fake.getVersionReturnsOnCall[len(fake.getVersionArgsForCall)]
	fake.getVersionArgsForCall = append(fake.getVersionArgsForCall, struct {
	}{})
	stub := fake.GetVersionStub
	fakeReturns := fake.getVersionReturns
	fake.recordInvocation("GetVersion", []interface{}{})
	fake.getVersionMutex.Unlock()
	if stub != nil {
		return stub()
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeObject) GetVersionCallCount() int {
	fake.getVersionMutex.RLock()
	defer fake.getVersionMutex.RUnlock()
	return len(fake.getVersionArgsForCall)
}

func (fake *FakeObject) GetVersionCalls(stub func() string) {
	fake.getVersionMutex.Lock()
	defer fake.getVersionMutex.Unlock()
	fake.GetVersionStub = stub
}

func (fake *FakeObject) GetVersionReturns(result1 string) {
	fake.getVersionMutex.Lock()
	defer fake.getVersionMutex.Unlock()
	fake.GetVersionStub = nil
	fake.getVersionReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeObject) GetVersionReturnsOnCall(i int, result1 string) {
	fake.getVersionMutex.Lock()
	defer fake.getVersionMutex.Unlock()
	fake.GetVersionStub = nil
	if fake.getVersionReturnsOnCall == nil {
		fake.getVersionReturnsOnCall = make(map[int]struct {
			result1 string
		})
	}
	fake.getVersionReturnsOnCall[i] = struct {
		result1 string
	}{result1}
}

func (fake *FakeObject) Render(arg1 map[string]interface{}) ([]byte, error) {
	fake.renderMutex.Lock()
	ret, specificReturn := fake.renderReturnsOnCall[len(fake.renderArgsForCall)]
	fake.renderArgsForCall = append(fake.renderArgsForCall, struct {
		arg1 map[string]interface{}
	}{arg1})
	stub := fake.RenderStub
	fakeReturns := fake.renderReturns
	fake.recordInvocation("Render", []interface{}{arg1})
	fake.renderMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeObject) RenderCallCount() int {
	fake.renderMutex.RLock()
	defer fake.renderMutex.RUnlock()
	return len(fake.renderArgsForCall)
}

func (fake *FakeObject) RenderCalls(stub func(map[string]interface{}) ([]byte, error)) {
	fake.renderMutex.Lock()
	defer fake.renderMutex.Unlock()
	fake.RenderStub = stub
}

func (fake *FakeObject) RenderArgsForCall(i int) map[string]interface{} {
	fake.renderMutex.RLock()
	defer fake.renderMutex.RUnlock()
	argsForCall := fake.renderArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeObject) RenderReturns(result1 []byte, result2 error) {
	fake.renderMutex.Lock()
	defer fake.renderMutex.Unlock()
	fake.RenderStub = nil
	fake.renderReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeObject) RenderReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.renderMutex.Lock()
	defer fake.renderMutex.Unlock()
	fake.RenderStub = nil
	if fake.renderReturnsOnCall == nil {
		fake.renderReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.renderReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeObject) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.getKindMutex.RLock()
	defer fake.getKindMutex.RUnlock()
	fake.getNameMutex.RLock()
	defer fake.getNameMutex.RUnlock()
	fake.getSourceMutex.RLock()
	defer fake.getSourceMutex.RUnlock()
	fake.getVersionMutex.RLock()
	defer fake.getVersionMutex.RUnlock()
	fake.renderMutex.RLock()
	defer fake.renderMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeObject) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ dndml.Object = new(FakeObject)
