// Code generated by counterfeiter. DO NOT EDIT.
package dndmlfakes

import (
	"sync"

	"github.com/theaufish-git/dndml/internal/dndml"
)

type FakeRenderable struct {
	RenderStub        func(map[string]interface{}) ([]byte, error)
	renderMutex       sync.RWMutex
	renderArgsForCall []struct {
		arg1 map[string]interface{}
	}
	renderReturns struct {
		result1 []byte
		result2 error
	}
	renderReturnsOnCall map[int]struct {
		result1 []byte
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeRenderable) Render(arg1 map[string]interface{}) ([]byte, error) {
	fake.renderMutex.Lock()
	ret, specificReturn := fake.renderReturnsOnCall[len(fake.renderArgsForCall)]
	fake.renderArgsForCall = append(fake.renderArgsForCall, struct {
		arg1 map[string]interface{}
	}{arg1})
	stub := fake.RenderStub
	fakeReturns := fake.renderReturns
	fake.recordInvocation("Render", []interface{}{arg1})
	fake.renderMutex.Unlock()
	if stub != nil {
		return stub(arg1)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeRenderable) RenderCallCount() int {
	fake.renderMutex.RLock()
	defer fake.renderMutex.RUnlock()
	return len(fake.renderArgsForCall)
}

func (fake *FakeRenderable) RenderCalls(stub func(map[string]interface{}) ([]byte, error)) {
	fake.renderMutex.Lock()
	defer fake.renderMutex.Unlock()
	fake.RenderStub = stub
}

func (fake *FakeRenderable) RenderArgsForCall(i int) map[string]interface{} {
	fake.renderMutex.RLock()
	defer fake.renderMutex.RUnlock()
	argsForCall := fake.renderArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeRenderable) RenderReturns(result1 []byte, result2 error) {
	fake.renderMutex.Lock()
	defer fake.renderMutex.Unlock()
	fake.RenderStub = nil
	fake.renderReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeRenderable) RenderReturnsOnCall(i int, result1 []byte, result2 error) {
	fake.renderMutex.Lock()
	defer fake.renderMutex.Unlock()
	fake.RenderStub = nil
	if fake.renderReturnsOnCall == nil {
		fake.renderReturnsOnCall = make(map[int]struct {
			result1 []byte
			result2 error
		})
	}
	fake.renderReturnsOnCall[i] = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

func (fake *FakeRenderable) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.renderMutex.RLock()
	defer fake.renderMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeRenderable) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ dndml.Renderable = new(FakeRenderable)
